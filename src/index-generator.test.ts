import fs = require('fs');
import path = require('path');
import { cwd } from 'process';

import { assert } from 'chai';
import { merge } from 'lodash';
import { sync as rimrafSync } from 'rimraf';

import { IndexGenerator } from './index-generator';
import { CreateMode, Options } from './options';

describe('index-generator tests', () => {
  describe('in memory tests', () => {
    it('Default', () => {
      test(
        {
          paths: ['test-data'],
        },
        {
          'index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './a';\r\nexport * from './b';\r\nexport * from './f0/c';\r\nexport * from './f1/d';\r\nexport * from './f1/f2/e';\r\nexport * from './f1/f3/f';\r\n",
        }
      );
    });

    it('Default with output', () => {
      test(
        {
          paths: ['test-data'],
          output: 'test-data/index.ts',
        },
        {
          'test-data/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './a';\r\nexport * from './b';\r\nexport * from './f0/c';\r\nexport * from './f1/d';\r\nexport * from './f1/f2/e';\r\nexport * from './f1/f3/f';\r\n",
        }
      );
    });

    it('CreateMode.Root', () => {
      test(
        {
          paths: ['test-data'],
          mode: CreateMode.Root,
        },
        {
          'test-data/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './a';\r\nexport * from './b';\r\nexport * from './f0/c';\r\nexport * from './f1/d';\r\nexport * from './f1/f2/e';\r\nexport * from './f1/f3/f';\r\n",
        }
      );
    });

    it('CreateMode.Root with output', () => {
      test(
        {
          paths: ['test-data'],
          output: '../public-api.ts',
          mode: CreateMode.Root,
        },
        {
          'public-api.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './a';\r\nexport * from './b';\r\nexport * from './f0/c';\r\nexport * from './f1/d';\r\nexport * from './f1/f2/e';\r\nexport * from './f1/f3/f';\r\n",
        }
      );
    });

    it('CreateMode.PerFolder', () => {
      test(
        {
          paths: ['test-data'],
          mode: CreateMode.PerFolder,
        },
        {
          'test-data/f0/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './c';\r\n",
          'test-data/f1/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './d';\r\nexport * from './f2/e';\r\nexport * from './f3/f';\r\n",
          'test-data/f1/f2/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './e';\r\n",
          'test-data/f1/f3/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './f';\r\n",
          'test-data/f1/f4/index.ts': '',
          'test-data/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './a';\r\nexport * from './b';\r\nexport * from './f0/c';\r\nexport * from './f1/d';\r\nexport * from './f1/f2/e';\r\nexport * from './f1/f3/f';\r\n",
        }
      );
    });

    it('CreateMode.PerFolderWithSub', () => {
      test(
        {
          paths: ['test-data'],
          mode: CreateMode.PerFolderWithSub,
        },
        {
          'test-data/f0/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './c';\r\n",
          'test-data/f1/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './d';\r\nexport * from './f2/index';\r\nexport * from './f3/index';\r\n",
          'test-data/f1/f2/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './e';\r\n",
          'test-data/f1/f3/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './f';\r\n",
          'test-data/f1/f4/index.ts': '',
          'test-data/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './a';\r\nexport * from './b';\r\nexport * from './f0/index';\r\nexport * from './f1/index';\r\n",
        }
      );
    });
  });

  describe('on disk tests', () => {
    beforeEach(() => {
      rimrafSync('./index.ts');
      rimrafSync('./test-data/**/index.ts');
      rimrafSync('./test-data/**/public-api.ts');
    });

    afterEach(() => {
      rimrafSync('./index.ts');
      rimrafSync('./test-data/**/index.ts');
      rimrafSync('./test-data/**/public-api.ts');
    });

    it('Default', () => {
      diskTest(
        {
          paths: ['test-data'],
        },
        {
          'index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './a';\r\nexport * from './b';\r\nexport * from './f0/c';\r\nexport * from './f1/d';\r\nexport * from './f1/f2/e';\r\nexport * from './f1/f3/f';\r\n",
        }
      );
    });

    it('Default with output', () => {
      diskTest(
        {
          paths: ['test-data'],
          output: 'test-data/index.ts',
        },
        {
          'test-data/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './a';\r\nexport * from './b';\r\nexport * from './f0/c';\r\nexport * from './f1/d';\r\nexport * from './f1/f2/e';\r\nexport * from './f1/f3/f';\r\n",
        }
      );
    });

    it('CreateMode.Root', () => {
      diskTest(
        {
          paths: ['test-data'],
          mode: CreateMode.Root,
        },
        {
          'test-data/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './a';\r\nexport * from './b';\r\nexport * from './f0/c';\r\nexport * from './f1/d';\r\nexport * from './f1/f2/e';\r\nexport * from './f1/f3/f';\r\n",
        }
      );
    });

    it('CreateMode.Root with output', () => {
      diskTest(
        {
          paths: ['test-data'],
          output: '../public-api.ts',
          mode: CreateMode.Root,
        },
        {
          'public-api.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './a';\r\nexport * from './b';\r\nexport * from './f0/c';\r\nexport * from './f1/d';\r\nexport * from './f1/f2/e';\r\nexport * from './f1/f3/f';\r\n",
        }
      );
    });

    it('CreateMode.PerFolder', () => {
      diskTest(
        {
          paths: ['test-data'],
          mode: CreateMode.PerFolder,
        },
        {
          'test-data/f0/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './c';\r\n",
          'test-data/f1/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './d';\r\nexport * from './f2/e';\r\nexport * from './f3/f';\r\n",
          'test-data/f1/f2/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './e';\r\n",
          'test-data/f1/f3/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './f';\r\n",
          'test-data/f1/f4/index.ts': '',
          'test-data/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './a';\r\nexport * from './b';\r\nexport * from './f0/c';\r\nexport * from './f1/d';\r\nexport * from './f1/f2/e';\r\nexport * from './f1/f3/f';\r\n",
        }
      );
    });

    it('CreateMode.PerFolderWithSub', () => {
      diskTest(
        {
          paths: ['test-data'],
          mode: CreateMode.PerFolderWithSub,
        },
        {
          'test-data/f0/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './c';\r\n",
          'test-data/f1/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './d';\r\nexport * from './f2/index';\r\nexport * from './f3/index';\r\n",
          'test-data/f1/f2/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './e';\r\n",
          'test-data/f1/f3/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './f';\r\n",
          'test-data/f1/f4/index.ts': '',
          'test-data/index.ts':
            "/*\r\n * This file was generated by a tool.\r\n * Do not modify it.\r\n */\r\n\r\nexport * from './a';\r\nexport * from './b';\r\nexport * from './f0/index';\r\nexport * from './f1/index';\r\n",
        }
      );
    });
  });
});

/**
 * Run test on a config.
 *
 * @param options Options to use.
 * @param outputs Outputs to expect.
 * @param writeToDisk Write output to disk.
 */
function test(
  options: Partial<Options>,
  outputs: { [path: string]: string },
  writeToDisk: boolean = false
): void {
  options.writeFile ??= (output, content): void => {
    if (writeToDisk) {
      if (content) {
        fs.writeFileSync(output, content);
      } else if (fs.existsSync(output)) {
        fs.rmSync(output);
      }
    }

    output = path.relative(cwd(), output).replace(/\\/g, '/');

    assert.equal(
      content,
      outputs[output],
      `Output file is not valid/needed '${output}'.`
    );

    delete outputs[output];
  };

  const generator = new IndexGenerator(options);

  generator.generate();

  if (Object.keys(outputs).length > 0) {
    assert.fail(
      `Output files were not generated: [${Object.keys(outputs).join(', ')}]`
    );
  }
}

/**
 * Run test on a config writing to disk and checking of iterations changes the result or not.
 *
 * @param options Options to use.
 * @param outputs Outputs to expect.
 */
function diskTest(
  options: Partial<Options>,
  outputs: { [path: string]: string }
): void {
  test(merge({}, options), merge({}, outputs), true);
  test(merge({}, options), merge({}, outputs), true);
  test(merge({}, options), merge({}, outputs), true);
}
